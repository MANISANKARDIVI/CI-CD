wsl Commands for windows:-
```````````````````````````
$ wsl --install

$ wsl --list --online

$ restart your system.

$ wsl --install -d Ubuntu-22.04

$ wsl --set-default Ubuntu-22.04


Java Command:-
```````````````
$ sudo apt install openjdk-17-jre-headless -y

Maven command:-
````````````````
$ sudo apt install maven -y

Jenkins commands:-
``````````````````
$ sudo  vi jenkins.sh && chmod +x jenkins.sh

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
    https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
	
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null
	
sudo apt-get update -y

sudo apt-get install jenkins -y


sudo systemctl start jenkins

sudo systemctl enable jenkins

sudo jenkins --version


-> localhost:8080

Install Jenkins plugins:-
`````````````````````````
Eclipse Temurin installer
Maven Integration
Role-based Authorization Strategy
Config File Provider
Pipeline Maven Integration
SonarQube Scanner
Docker
Docker Commons
Docker Pipeline
Docker API
docker-build-step
Kubernetes
Kubernetes Client API
Kubernetes Credentials
Kubernetes CLI
Publish Over SSH
Blue Ocean 
Prometheus metrics
Nexus Artifact Uploader
SSH Agent
Deploy to container
Artifactory
Artifact Deployer


Docker commands:-
`````````````````
$ sudo vi docker.sh && chmod +x docker.sh

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

sudo systemctl start docker 

sudo systemctl enable docker

sudo usermod -aG docker $USER

sudo chmod 777 /var/run/docker.sock 

sudo docker version




Trivy commands:-
````````````````
$ sudo vi trivy.sh && chmod +x trivy.sh

sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy -y

sudo trivy --version



Nexus Docker command:-
`````````````````````
$ docker run -itd --name nexus -p 8081:8081 sonatype/nexus3

$ localhost:8081


Sonarqube Docker command:-
```````````````````````````
$ docker run -itd --name sonar -p 9000:9000 sonarqube:lts-community

$ docker ps

$ localhost:9000


pipeline Syntax:-
```````````````````
pipeline {
    agent any

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MANISANKARDIVI/Board-Game.git'
            }
        }
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-token') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-report.html .'
            }
        }
        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Nexus Artifact') {
            steps {
                script {
                    withMaven(globalMavenSettingsConfig: 'settings.xml', jdk: 'java-17', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                        sh 'mvn deploy'
                    }
                }
            }
        }
        stage('Docker build') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t manisankardivi/boardgame .'
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o trivy-image-report.html manisankardivi/boardgame'
            }
        }
        stage('Docker Registry') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push manisankardivi/boardgame'
                    }
                }
            }
        }
        
        stage('K8S depolyment') {
            steps {
                script{
                    withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.10.134:6443') {
                        sh 'kubectl apply -f depolyment-service.yaml'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                def body = """
                    <html>
                    <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                    <h2>${jobName} - Build ${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                    <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                    </div>
                    </body>
                    </html>
                """
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manisankar.divi@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-fs-report.html,trivy-image-report.html'
                )
            }
        }
    }
}

